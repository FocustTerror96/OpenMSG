/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package oserver;

import com.dosse.upnp.UPnP; // -------------------- Imports ---------------- //
import java.io.BufferedOutputStream;
import java.util.Random;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.charset.Charset;
import java.security.GeneralSecurityException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.RSAPublicKeySpec;
import java.util.Arrays;
import java.util.Base64;
import java.util.Scanner;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException; // --------------------------------- //

/**
 *
 * @author sgmud
 */
public class Server extends javax.swing.JFrame { // Main class housing the UI code and the server code
    public String ServName = "Server: "; // This is a place holder for the server name 
    public ServerSocket SSocket; // This is the server socket object that listens for incoming connections
    public Socket CSocket; // This is a socket object that creats a connection
    public PrintWriter out; // This is a print writer object that will write to the socket
    public BufferedReader in; // This Buffered Reader object will read any data coming in on the socket
    public OutputStream f; // This is used in conjunction with the printwriter to write to the socket
    public Scanner scan = new Scanner(System.in); // Scanner object which can be used to read a line entered into console (debug reasons)
    public String message; // This is what the message is set to when recived
    public int countSend = 0; // This is a variable that increases as each mesasge is sent
    public int countReceve = 0; // This is a variable that will increase as messages are receved
    public Encryption e = new Encryption(); // This creats a new encryption object for use 
    public String SendMessage; // This is what a message is sent to once retreved from the jTextField
    public Random rand = new Random(); // This class is used to generate a random password 
    public String Password_S; // This is the variable the password is set to 
    public Thread thred = new Thread(); // This thred class is to be used with my listner
    public int q = 0; // This is used to tell if the program is in first time start up, and if so some special code will run
    public String Pass_entered; // This is the password sent from the client
    public int k = 0; // This increments once a section of code is ran so it dosent run again
    public int TogLog = 0; // This is turned to a 1 if logs are toggled
    public String ClientIP; // This Stores the clients IP address 
    public String ClientHostName; // This stores the clients host name
    public BlackList Black = new BlackList(); // This is my blacklist class called black
    /**
     * Creates new form Server
     */
    public Server() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jButton1.setText("Send Message");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Start Server");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("Password:");

        jButton3.setText("Get Password");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton5.setText("Log");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel3.setText("Turn On Chat Logs :");

        jLabel4.setText("Admin Features:");

        jLabel2.setText("Clients UserName:");

        jLabel5.setText("Clients IP address:");

        jLabel6.setText("Client Host Name:");

        jMenu1.setText("Help");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        jMenuItem2.setText("Help Menu");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Settings");
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });

        jMenu3.setText("Settings");

        jMenuItem1.setText("Settings");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenu2.add(jMenu3);

        jMenuBar1.add(jMenu2);

        jMenu4.setText("Blacklist");

        jMenuItem3.setText("jMenuItem3");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem3);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jTextField2)
                    .addComponent(jTextField4)
                    .addComponent(jTextField5)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(42, 42, 42)
                        .addComponent(jTextField3))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))
                        .addGap(17, 17, 17))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jButton3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(16, 16, 16)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(171, 171, 171)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jButton5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)
                        .addGap(10, 10, 10)
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        start(StartMenuServer.port);  // This starts the server and the first time setup when clicked
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        SendMessage = jTextField1.getText(); // Grabs the message from the jTextField
        ProfanityCheck(SendMessage); // Checks for any bad words
        System.out.println("Origional Message:"+SendMessage); // De-bugging message
        try {
            e.LoadPublicKey("RSA/publickey"); // Loads the public key
            sendMessage(e.Encrypt(SendMessage, Base64.getEncoder().encodeToString(Encryption.publicKey.getEncoded()))); 
            // Runs send message with an encrypted byte array
            
        } catch (InvalidKeyException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchPaddingException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadPaddingException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalBlockSizeException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        } catch (GeneralSecurityException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        PreStart();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed

    }//GEN-LAST:event_jMenu2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        new Settings().setVisible(true); // Opens settings menu
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        new Help().setVisible(true); // Opens help Menu
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        new Help().setVisible(true); // Opens Help Menu
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        TogLog = 1;
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        new BlackList().setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Server().setVisible(true);
            }
        });
    }

    public void ProfanityCheck(String msg){ // Checks a message with a pre-defined list of banned words
        String[] swear = {"colonialism", "communist", "drugs"}; // List of banned workd
        for(int n = 0; n < swear.length; n++){ // Will increment by 1 up to the length of the list
            if(msg.equals(swear[n])){ // If the message equals any of the bad words
                jTextArea1.append(ServName + " : " + "Cant Send profanity!" + "\n"); // Display the warning message that you cant say that word
                SendMessage = null; // overwrites the message with nothing so it is not sent
            }
        }
        
    }
    
    
    
     public void sendMessage(byte[] msg) throws FileNotFoundException, GeneralSecurityException{ // Takes the message as a byte array
        if(msg.equals("null")){
                
                
        }        
        else{
            try{
                jTextArea1.append(Settings.Username + " :" + SendMessage + "\n");  // Displays the message your sending to your self
                if (TogLog == 1){
                    Logs(SendMessage, Settings.Username); // Will log the message if logs are toggled
                }
                System.out.print("Message After Encryption:"+Arrays.toString(msg)); 
                f = CSocket.getOutputStream(); // Creats the output stream
                out = new PrintWriter(f, true); // Creats the print writer with the output stream
                String encodedmsg = new String(msg, "ISO-8859-1"); // Encodes the byte array in a format that can be sent
                System.out.print("Message After Encryption and encoding:"+ encodedmsg);
                out.println(encodedmsg); // Sends the encoded and encrypted message to the client
                
            
                countSend++; // Increasaes the counter 
            }catch (IOException e){ // Catches exeptions
                System.out.println("ERROR"); // Displayes an error message
            }
 
        }
        
            

    }  
    
    public int o = 0; // Uset to only allow a section of code to be run once
    public void Logs(String Message, String Name) throws IOException{ // This method takes the message and the person who sent it and logs it in a txt file
      if (o==0){
          File Logs = new File("LogFiles/Logs.txt"); // Creats the file and folder
          Logs.getParentFile().mkdirs(); // Automatically writes the full path of the file and folder into where ever the program is stored
          
          o++; // Prevents this code from running again
      }
        
        
      FileWriter fstream = new FileWriter("LogFiles/Logs.txt", true); // Creats a new file writer 
      BufferedWriter outwriter = new BufferedWriter(fstream); // Creats a new biffered writer
      outwriter.write("\n" + Name + " : " +Message); // Writes the name and message of the person down on the log
      outwriter.flush(); // flushes the writer
      outwriter.close(); // closes the writer
        
        
    } 
     
     
     
    public void PreStart(){ // Creats the password
        
        if (q == 0){ // Only runs once
            int Password = (int)(Math.random() * (99999-10000 + 1) + 10000); // Creats a random 5 character number
            Password_S = Integer.toString(Password); // converts it as a string to be displayed
            jTextField3.setText(Password_S); // Displays the password
            q++;
        }
        
        
    }
    
    public void start(int port) { // Starts the server with the collected port
        
        
        if(k==0){    // This section of code is only allowed to run once
            try {
                e.KeyGeneration(); // Generates Public and Private Key Pair
                e.writeToFile("RSA/publickey", e.publicKey.getEncoded()); // Saves the public key to a file
                e.writeToFile("RSA/privatekey", e.privateKey.getEncoded()); // saves a private key to a file
                Settings.Username = "You"; // This sets your own username
                Settings.Client_Username = "Client"; // This sets the clients username 
                k++; // Increases to prevent running again
            } catch (IOException ex) { // Catch IOExceptions 
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex); // Displays an error path
            } catch (NoSuchAlgorithmException ex) { // Catch NoSuchAlgorithmException exeptions
                Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex); // Displays an error path
            }
        }
        
         
        f = null; // Initilising global variables to be in scope of the try catch
        out = null; // Initilising global variables to be in scope of the try catch
        in = null; // Initilising global variables to be in scope of the try catch
        CSocket = null; // Initilising global variables to be in scope of the try catch
        try{ 
            
            System.out.println("Listening"); 
            UPnP.openPortTCP(port); // Opens the port for UPnP allowing use over the internet
            SSocket = new ServerSocket(port); // Creat the server socket with the port number
            CSocket = SSocket.accept(); // When a successfull connection is made a socket is produced
            jTextArea1.append(ServName + "Client Connected\n"); // Lets the person running the server know that the client has connected
            
            out = new PrintWriter(CSocket.getOutputStream(), true); // Creating the Printwriter to write to the socket
            in = new BufferedReader(new InputStreamReader(CSocket.getInputStream())); // Creatig the bufferedReader to read incoming data from the socket
            Timer timer = new Timer(); // Creating a new timer object 
            
            InetAddress ClientAddress = CSocket.getInetAddress(); // Grabbing the clients internet address information
            ClientIP = InetAddress.getLocalHost().getHostAddress(); // saving the clients IP address
            ClientHostName = ClientAddress.getHostName(); // saving the clients  Host Name
            jTextField4.setText(ClientIP+"\n"); // Displaying IP to UI
            jTextField5.setText(ClientHostName); // Displaying Hostname to UI
            
            
            if(Black.Search(ClientIP, "BlackList/BlackList.txt").equals("A")){ // Runs a liniar search algorithm against the stored IP addrersses on the blacklist CSV file
                jTextArea1.append(ServName + "Client BlackListed...\n" + "Disconnecting...\n"); // if its blacklisted there it will display this message
                CSocket.close(); // It will then disconnect the client
            }
            else{
                jTextArea1.append(ServName + "Server IP not BlackListed\n");
            }
            
            
            
            
            timer.scheduleAtFixedRate( // Runs the code in the run() method periodically
            new TimerTask()
            {
                public void run()
                {
                    try {
                        Listner(); // Runs this method periodically
                    } catch (IOException ex) { // Catch IO Exceptions 
                        Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex); // Displays an error path
                    }
                    
                }
            },
            0,      // run first occurrence immediately
            1);  // run every 1/1000 seconds
            
 
            }catch(IOException e){// Catch IO Exceptions 
                System.out.println("ERROR");
                System.out.println("ERROR in method Start in the server class");
            }   
    }
    
   


    public void disconnect(){
        try{
            System.out.println("Disconnecting..." +"\n");
            CSocket.close();
        }catch(IOException e){// Catch IO Exceptions 
            
        }
    }
  
    // Key Signature To show message is special
    public String Special = "/";
    
    
    // Signatures For messages Below
    public String userNameSig = "!/!/"; // Means Username
    
    public void Specialisation(String Message){ // Will work out what controll function is what
        System.out.println("message is special!"); 
        String MsgSig = Message.substring(1, 4); // Checks the 4 character signature to match to a functiopn
        if(MsgSig.equals(userNameSig)){ // If the signature in the message matches the one here it will treat the rest of the message as a username
            jTextField2.setText(message); // Display the username of the clients onto the UI
            Settings.Client_Username = message; // Set the message equal to the username
            countReceve++;
        }
    }
    
    
    
    
    
    
    
    
     public void Listner() throws IOException { // The code in this listener runs on a thred perioduically
        int p = 0;
        message = "";
        String DecryptedMSG = "";
        try{
            message = in.readLine(); // Set The Message value as the incoming data if there is any
        }catch(IOException e){// Catch IO Exceptions 
        }
        if (countReceve == 0){ // Read Entered Password 
            
            Pass_entered = message; // Setting the password
            if (Pass_entered.equals(Password_S)){  // Chack if the entered password is correct
                //System.out.println(Pass_entered);
                jTextArea1.append(ServName + "Correct pasword!" +"\n"); // Displays a meesage to tell the server host that the client got he correct password
                message = "";
                countReceve++; // Increases the count so that this code is not run again
            }
            else{
                jTextArea1.append(ServName + "Password Incorrect" +"\n"); // Lets the server host know that the client got the wronmg passowrd
                disconnect(); // Ends the connection
            }
        }
        
       
            
        
        if(message.equals("")==false && p == 0){ // Decrypt any data that comes through teh socket
            try{
                
                System.out.println(message);  
                byte[] decodedmsg = message.getBytes(Charset.forName("ISO-8859-1")); // Converts the message from the charset 
                try {
                    DecryptedMSG = e.decrypt(decodedmsg, e.privateKey); // Decrypts the message with your own private key
                    if(DecryptedMSG.substring(0, 1).equals(Special)){ // If the first character is a /
                        Specialisation(DecryptedMSG); // Then run specilisation thred to see what type of controll function it is
                        p++; // Increase the message counter
                    }   
                } catch (InvalidKeyException | NoSuchAlgorithmException | NoSuchPaddingException | BadPaddingException | IllegalBlockSizeException ex) { // Handles all exeptions
                    Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex); // Displays error path
                }
            
            }catch(IOException e){ // Catches IO exeptions
                
            }
        }
        
        
        
        if(DecryptedMSG.equals("")==false && p == 0){ // Checks tro see if there is nothing
            jTextArea1.append(Settings.Client_Username + " : " + DecryptedMSG + "\n"); // Displayes the message as well as the username
            if (TogLog == 1){
                Logs(DecryptedMSG, Settings.Client_Username); // If the logs are toggled it will log the message
            }
            countReceve++; // increase messages receved counter
        }
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    // End of variables declaration//GEN-END:variables
}


