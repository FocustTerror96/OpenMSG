/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package oserver;
                    // Imports for File management Librarys and Array Librarys and exeption handling librarys //
import java.awt.List;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Array;
import java.net.InetAddress;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;
import java.util.logging.Level; 
import java.util.logging.Logger;

/**
 *
 * @author sgmud
 */
public class BlackList extends javax.swing.JFrame { // Deals with black list 
    public String BlackListIP; // String stores the entered IP address to be black listed
    public String[] myStringArray = new String[100]; // Array 100 spaces long
    public int ArrayPos = 0; // Array position counter
    public int o = 0; // Prevents a pice of code running twice
    
    /**
     * Creates new form BlackList
     */
    public BlackList() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        jButton1.setText("Save");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Enter an IP to blacklist:");

        jMenu1.setText("Help");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Settings");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        BlackListIP = jTextField1.getText(); // Grabs the entered IP address and saves it as a global string
        ArrayAdd(BlackListIP, ArrayPos); // Adds IP address to end of array 
        try {
            SaveBlackList(BlackListIP); // Saves IP address to CSV file
        } catch (IOException ex) { // Catches IO exeption
            Logger.getLogger(BlackList.class.getName()).log(Level.SEVERE, null, ex); // Logs the error path
        }
    }//GEN-LAST:event_jTextField1ActionPerformed

    public void ArrayAdd(String IP, int ArrayLeng){ // Handles the current array
      
        myStringArray[ArrayLeng] = "IP"; // adds entered IP address to end of array
        ArrayPos++; // Increments the arrays position
    }
    
    public void SaveBlackList(String IP) throws IOException{ // Saves entered IP addresses to CSV file
        if (o==0){ // O increments making this code only run once
          File Logs = new File("BlackList/BlackList.txt"); // Creats the file and folder
          Logs.getParentFile().mkdirs(); // Automatically writes the full path of the file and folder into where ever the program is stored
          
          o++; // Prevents this code from running again
      }
        
        
      FileWriter fstream = new FileWriter("BlackList/BlackList.txt", true); // Creats a new file writer 
      BufferedWriter outwriter = new BufferedWriter(fstream); // Creats a new biffered writer
      outwriter.write(IP+","); // Writes the IP address down in csv file
      outwriter.flush(); // flushes the writer
      outwriter.close(); // closes the writer
        
    }
    
    
    
    public String Search(String IP, String File) throws FileNotFoundException, IOException{ // Liniar search for IP address
        String line; // Initilises line variable before try catch
        String delimiter = ","; // Initilises delimiter before try catch
        try(Scanner s = new Scanner(new File(File))){ // Try catch run with scanner set to scan my file 
            
            line = s.next(); // Variable holds first line in file 
            String everything = line; // Set the entire line to a string variable
            String[] array = everything.split(","); // Split each section of the string where the comma is and save each individual part into an array
            for(int k = 0; k < array.length ; k++){ // Liniar search (checks every slot untill found)
                if(array[k].equals(IP)){ // If the Ip is found on the black list 
                    return("A"); // send back letter A (which will cut off the connection to the client)
                    
                }
            }
            
        }
        return null;

    }

        
        
        
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BlackList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BlackList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BlackList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BlackList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BlackList().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
